// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(uuid())
  username String @unique
  email String @unique
  password String
  avatar String?
  posts Post[]
  likes Like[]
  comments Comment[]
  followers Follow[] @relation("follower")
  following Follow[] @relation("following")

}

model Follow {
  id String @id @default(uuid())
  followerId String
  followingId String
  status String @default("pending") // "pending", "accepted"

  follower User @relation(fields: [followerId], references: [id], name: "follower")
  following User @relation(fields: [followingId], references: [id], name: "following")

}

model Post{
  id String @id @default(uuid())
  content String  
  authorId String
  author User @relation(fields: [authorId], references: [id])
  likes Like[]
  comments Comment[]
  createdAt DateTime @default(now())
}

model Like {
  id String @id @default(uuid())
  userId String
  postId String

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model Comment {
  id String @id @default(uuid())
  content String
  postId String
  authorId String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id])
  author User @relation(fields: [authorId], references: [id])
  }